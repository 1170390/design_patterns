.. _behavioral:

行为型模式
====================


行为型模式(Behavioral Pattern)是对在不
同的对象之间划分责任和算法的抽象化。

行为型模式不仅仅关注类和对象的结构，而
且重点关注它们之间的相互作用。

通过行为型模式，可以更加清晰地划分类与
对象的职责，并研究系统在运行时实例对象
之间的交互。在系统运行时，对象并不是孤
立的，它们可以通过相互通信与协作完成某
些复杂功能，一个对象在运行时也将影响到
其他对象的运行。

行为型模式分为类行为型模式和对象行为型模式两种：

- 类行为型模式：类的行为型模式使用继承关系在几个类之间
分配行为，类行为型模式主要通过多态等方式来分配父类与
子类的职责。
- 对象行为型模式：对象的行为型模式则使用对象的聚合关联
关系来分配行为，对象行为型模式主要是通过对象关联等方
式来分配两个或多个类的职责。根据“合成复用原则”，系
统中要尽量使用关联关系来取代继承关系，因此大部分行为
型设计模式都属于对象行为型设计模式。

**包含模式**

- 职责链模式(Chain of Responsibility)
    重要程度：3
- 命令模式(Command)
    重要程度：4
- 解释器模式(Interpreter)
    重要程度：1
- 迭代器模式(Iterator)
    重要程度：5
- 中介者模式(Mediator)
    重要程度：2
- 备忘录模式(Memento)
    重要程度：2
- 观察者模式(Observer)
    重要程度：5
- 状态模式(State)
    重要程度：3
- 策略模式(Strategy)
    重要程度：4
- 模板方法模式(Template Method)
    重要程度：3
- 访问者模式(Visitor)
    重要程度：1

**目录**

.. toctree::
   :maxdepth: 2
   :numbered: 2
    
   simple_factory
   factory_method

